cmake_minimum_required(VERSION 3.15)
project(native_jni)

set(CMAKE_CXX_STANDARD 14)

set(OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_PATH})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_PATH})

message("JNI_COMMON_INCLUDE: ${JNI_COMMON_INCLUDE}")

if (WIN32)
    # Set the DLLEXPORT variable to export symbols
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
    set(JNI_INCLUDE ${JNI_COMMON_INCLUDE} ${JNI_COMMON_INCLUDE}/win32)
    set(JNI_INCLUDE ${JNI_INCLUDE} PARENT_SCOPE)
    set(LIB_EXT dll)
    set(LIB_NAME ${PROJECT_NAME}.dll)
    message("Target lib name: ${LIB_NAME}")
elseif (APPLE)
    set(JNI_INCLUDE ${JNI_COMMON_INCLUDE} ${JNI_COMMON_INCLUDE}/darwin)
    set(JNI_INCLUDE ${JNI_INCLUDE} PARENT_SCOPE)
    set(LIB_EXT dylib)
    set(LIB_NAME ${PROJECT_NAME}.dylib)
    message("Target lib name: ${LIB_NAME}")
elseif (UNIX)
    set(JNI_INCLUDE ${JNI_COMMON_INCLUDE} ${JNI_COMMON_INCLUDE}/linux)
    set(JNI_INCLUDE ${JNI_INCLUDE} PARENT_SCOPE)
    set(LIB_EXT so)
    set(LIB_NAME ${PROJECT_NAME}.so)
    message("Target lib name: ${LIB_NAME}")
endif ()

message("JNI_COMMON_INCLUDE: ${JNI_INCLUDE}")
include_directories(${PROJECT_NAME} INTERFACE ${JNI_INCLUDE})
set(API_INCLUDE include)
set(API_INCLUDE ${API_INCLUDE} PARENT_SCOPE)
include_directories(${PROJECT_NAME} INTERFACE ${API_INCLUDE})

message("-- Linking native_lib")
add_library(${PROJECT_NAME} SHARED lib.cc src/Api.cpp src/DxFeed.cpp)
set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "")

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra)
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "MSVC")
    target_compile_options(${PROJECT_NAME} PRIVATE /EHsc /MTd /W2 /c)
endif()
